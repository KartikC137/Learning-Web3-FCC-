{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_baseFee",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_gasPrice",
          "type": "uint96"
        },
        {
          "internalType": "int256",
          "name": "_weiPerUnitLink",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "externalBalance",
          "type": "uint256"
        }
      ],
      "name": "BalanceInvariantViolated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToSendNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedToTransferLink",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExtraArgsTag",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRandomWords",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSubscription",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "MustBeRequestedOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "MustBeSubOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCallableFromLink",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingRequestExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyConsumers",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeFundsRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payment",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "nativePayment",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "onlyPremium",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "extraArgs",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLink",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountNative",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "SubscriptionConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "SubscriptionConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldNativeBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNativeBalance",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionFundedWithNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SubscriptionOwnerTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "SubscriptionOwnerTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LINK_NATIVE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CONSUMERS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "acceptSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "consumerIsAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_words",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWordsWithOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "fundSubscriptionWithNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCount",
          "type": "uint256"
        }
      ],
      "name": "getActiveSubscriptionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "balance",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "nativeBalance",
          "type": "uint96"
        },
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "subOwner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "consumers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_base_fee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gas_price",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_wei_per_unit_link",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        }
      ],
      "name": "ownerCancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverNativeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "keyHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "subId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "requestConfirmations",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numWords",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct VRFV2PlusClient.RandomWordsRequest",
          "name": "_req",
          "type": "tuple"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "requestSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_config",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "reentrancyLock",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "stalenessSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeNativePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkDiscountPPM",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "nativePremiumPercentage",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "linkPremiumPercentage",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_currentSubNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalBalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalNativeBalance",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "linkNativeFeed",
          "type": "address"
        }
      ],
      "name": "setLINKAndLINKNativeFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bab29282a5fc76e64a1e31908a981c4b4ff53272fc9c8e82e6ecfb9c2a42f75",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5364452",
    "logsBloom": "0x
    "blockHash": "0x57cd067f6ec561bfbb4fe699501908249cb099f9d864a6adc7717ab22dfe4e6d",
    "transactionHash": "0x5bab29282a5fc76e64a1e31908a981c4b4ff53272fc9c8e82e6ecfb9c2a42f75",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x5bab29282a5fc76e64a1e31908a981c4b4ff53272fc9c8e82e6ecfb9c2a42f75",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x57cd067f6ec561bfbb4fe699501908249cb099f9d864a6adc7717ab22dfe4e6d"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "5364452",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "250000000000000000",
    1000000000,
    4609050109111871
  ],
  "numDeployments": 1,
  "solcInputHash": "e0d6941cc40766e9637d4415f452b344",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_baseFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_gasPrice\",\"type\":\"uint96\"},{\"internalType\":\"int256\",\"name\":\"_weiPerUnitLink\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceInvariantViolated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToSendNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToTransferLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExtraArgsTag\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomWords\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"MustBeRequestedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableFromLink\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeFundsRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nativePayment\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onlyPremium\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLink\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountNative\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNativeBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNativeBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFundedWithNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"SubscriptionOwnerTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_NATIVE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"consumerIsAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_words\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWordsWithOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"subOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_base_fee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gas_price\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_wei_per_unit_link\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"ownerCancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverNativeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct VRFV2PlusClient.RandomWordsRequest\",\"name\":\"_req\",\"type\":\"tuple\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_config\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"reentrancyLock\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeNativePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkDiscountPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"nativePremiumPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"linkPremiumPercentage\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_currentSubNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalNativeBalance\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkNativeFeed\",\"type\":\"address\"}],\"name\":\"setLINKAndLINKNativeFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"fulfillRandomWords(uint256,address)\":{\"details\":\"This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.\",\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\"}},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\",\"_words\":\"user-provided random words\"}},\"fundSubscription(uint256,uint256)\":{\"params\":{\"_amount\":\"the amount to fund\",\"_subId\":\"the subscription to fund\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"reqCount\":\"- Requests count of subscription.\",\"subOwner\":\"- owner of the subscription.\"}},\"ownerCancelSubscription(uint256)\":{\"details\":\"notably can be called even if there are pending requests, outstanding ones may fail onchain\",\"params\":{\"subId\":\"subscription id\"}},\"recoverFunds(address)\":{\"params\":{\"to\":\"address to send link to\"}},\"recoverNativeFunds(address)\":{\"params\":{\"to\":\"address to send native to\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}},\"setLINKAndLINKNativeFeed(address,address)\":{\"params\":{\"link\":\"- address of link token\",\"linkNativeFeed\":\"address of the link native feed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fulfillRandomWords(uint256,address)\":{\"notice\":\"fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer.\"},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"notice\":\"fulfillRandomWordsWithOverride allows the user to pass in their own random words.\"},\"fundSubscription(uint256,uint256)\":{\"notice\":\"fundSubscription allows funding a subscription with an arbitrary amount for testing.\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active VRF subscriptions.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a VRF subscription.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"ownerCancelSubscription(uint256)\":{\"notice\":\"Owner cancel subscription, sends remaining link directly to the subscription owner.\"},\"recoverFunds(address)\":{\"notice\":\"Recover link sent with transfer instead of transferAndCall.\"},\"recoverNativeFunds(address)\":{\"notice\":\"Recover native sent with transfer/call/send instead of fundSubscription.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"},\"setConfig()\":{\"notice\":\"Sets the configuration of the vrfv2 mock coordinator\"},\"setLINKAndLINKNativeFeed(address,address)\":{\"notice\":\"set the LINK token contract and link native feed to be used by this coordinator\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol\":\"VRFCoordinatorV2_5Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5f9ee31598e2250815033c2f4e1e7e747f917815378938505063df1d4ae603ec\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/openzeppelin-solidity/v4.7.3/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7c71fcc0e9b596196c599468338a3289f4ca1e2fcf8cad721ae48a9b562af79c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/SubscriptionAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {EnumerableSet} from \\\"../../vendor/openzeppelin-solidity/v4.7.3/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {LinkTokenInterface} from \\\"../../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\nimport {AggregatorV3Interface} from \\\"../../shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC677Receiver} from \\\"../../shared/interfaces/IERC677Receiver.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./interfaces/IVRFSubscriptionV2Plus.sol\\\";\\n\\nabstract contract SubscriptionAPI is ConfirmedOwner, IERC677Receiver, IVRFSubscriptionV2Plus {\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  /// @dev may not be provided upon construction on some chains due to lack of availability\\n  LinkTokenInterface public LINK;\\n  /// @dev may not be provided upon construction on some chains due to lack of availability\\n  AggregatorV3Interface public LINK_NATIVE_FEED;\\n\\n  // We need to maintain a list of consuming addresses.\\n  // This bound ensures we are able to loop over them as needed.\\n  // Should a user require more consumers, they can use multiple subscriptions.\\n  uint16 public constant MAX_CONSUMERS = 100;\\n  error TooManyConsumers();\\n  error InsufficientBalance();\\n  error InvalidConsumer(uint256 subId, address consumer);\\n  error InvalidSubscription();\\n  error OnlyCallableFromLink();\\n  error InvalidCalldata();\\n  error MustBeSubOwner(address owner);\\n  error PendingRequestExists();\\n  error MustBeRequestedOwner(address proposedOwner);\\n  error BalanceInvariantViolated(uint256 internalBalance, uint256 externalBalance); // Should never happen\\n  event FundsRecovered(address to, uint256 amount);\\n  event NativeFundsRecovered(address to, uint256 amount);\\n  error LinkAlreadySet();\\n  error FailedToSendNative();\\n  error FailedToTransferLink();\\n  error IndexOutOfRange();\\n  error LinkNotSet();\\n\\n  // We use the subscription struct (1 word)\\n  // at fulfillment time.\\n  struct Subscription {\\n    // There are only 1e9*1e18 = 1e27 juels in existence, so the balance can fit in uint96 (2^96 ~ 7e28)\\n    uint96 balance; // Common link balance used for all consumer requests.\\n    // a uint96 is large enough to hold around ~8e28 wei, or 80 billion ether.\\n    // That should be enough to cover most (if not all) subscriptions.\\n    uint96 nativeBalance; // Common native balance used for all consumer requests.\\n    uint64 reqCount;\\n  }\\n  // We use the config for the mgmt APIs\\n  struct SubscriptionConfig {\\n    address owner; // Owner can fund/withdraw/cancel the sub.\\n    address requestedOwner; // For safely transferring sub ownership.\\n    // Maintains the list of keys in s_consumers.\\n    // We do this for 2 reasons:\\n    // 1. To be able to clean up all keys from s_consumers when canceling a subscription.\\n    // 2. To be able to return the list of all consumers in getSubscription.\\n    // Note that we need the s_consumers map to be able to directly check if a\\n    // consumer is valid without reading all the consumers from storage.\\n    address[] consumers;\\n  }\\n  struct ConsumerConfig {\\n    bool active;\\n    uint64 nonce;\\n    uint64 pendingReqCount;\\n  }\\n  // Note a nonce of 0 indicates the consumer is not assigned to that subscription.\\n  mapping(address => mapping(uint256 => ConsumerConfig)) /* consumerAddress */ /* subId */ /* consumerConfig */\\n    internal s_consumers;\\n  mapping(uint256 => SubscriptionConfig) /* subId */ /* subscriptionConfig */ internal s_subscriptionConfigs;\\n  mapping(uint256 => Subscription) /* subId */ /* subscription */ internal s_subscriptions;\\n  // subscription nonce used to construct subId. Rises monotonically\\n  uint64 public s_currentSubNonce;\\n  // track all subscription id's that were created by this contract\\n  // note: access should be through the getActiveSubscriptionIds() view function\\n  // which takes a starting index and a max number to fetch in order to allow\\n  // \\\"pagination\\\" of the subscription ids. in the event a very large number of\\n  // subscription id's are stored in this set, they cannot be retrieved in a\\n  // single RPC call without violating various size limits.\\n  EnumerableSet.UintSet internal s_subIds;\\n  // s_totalBalance tracks the total link sent to/from\\n  // this contract through onTokenTransfer, cancelSubscription and oracleWithdraw.\\n  // A discrepancy with this contract's link balance indicates someone\\n  // sent tokens using transfer and so we may need to use recoverFunds.\\n  uint96 public s_totalBalance;\\n  // s_totalNativeBalance tracks the total native sent to/from\\n  // this contract through fundSubscription, cancelSubscription and oracleWithdrawNative.\\n  // A discrepancy with this contract's native balance indicates someone\\n  // sent native using transfer and so we may need to use recoverNativeFunds.\\n  uint96 public s_totalNativeBalance;\\n  uint96 internal s_withdrawableTokens;\\n  uint96 internal s_withdrawableNative;\\n\\n  event SubscriptionCreated(uint256 indexed subId, address owner);\\n  event SubscriptionFunded(uint256 indexed subId, uint256 oldBalance, uint256 newBalance);\\n  event SubscriptionFundedWithNative(uint256 indexed subId, uint256 oldNativeBalance, uint256 newNativeBalance);\\n  event SubscriptionConsumerAdded(uint256 indexed subId, address consumer);\\n  event SubscriptionConsumerRemoved(uint256 indexed subId, address consumer);\\n  event SubscriptionCanceled(uint256 indexed subId, address to, uint256 amountLink, uint256 amountNative);\\n  event SubscriptionOwnerTransferRequested(uint256 indexed subId, address from, address to);\\n  event SubscriptionOwnerTransferred(uint256 indexed subId, address from, address to);\\n\\n  struct Config {\\n    uint16 minimumRequestConfirmations;\\n    uint32 maxGasLimit;\\n    // Reentrancy protection.\\n    bool reentrancyLock;\\n    // stalenessSeconds is how long before we consider the feed price to be stale\\n    // and fallback to fallbackWeiPerUnitLink.\\n    uint32 stalenessSeconds;\\n    // Gas to cover oracle payment after we calculate the payment.\\n    // We make it configurable in case those operations are repriced.\\n    // The recommended number is below, though it may vary slightly\\n    // if certain chains do not implement certain EIP's.\\n    // 21000 + // base cost of the transaction\\n    // 100 + 5000 + // warm subscription balance read and update. See https://eips.ethereum.org/EIPS/eip-2929\\n    // 2*2100 + 5000 - // cold read oracle address and oracle balance and first time oracle balance update, note first time will be 20k, but 5k subsequently\\n    // 4800 + // request delete refund (refunds happen after execution), note pre-london fork was 15k. See https://eips.ethereum.org/EIPS/eip-3529\\n    // 6685 + // Positive static costs of argument encoding etc. note that it varies by +/- x*12 for every x bytes of non-zero data in the proof.\\n    // Total: 37,185 gas.\\n    uint32 gasAfterPaymentCalculation;\\n    // Flat fee charged per fulfillment in millionths of native.\\n    // So fee range is [0, 2^32/10^6].\\n    uint32 fulfillmentFlatFeeNativePPM;\\n    // Discount relative to fulfillmentFlatFeeNativePPM for link payment in millionths of native\\n    // Should not exceed fulfillmentFlatFeeNativePPM\\n    // So fee range is [0, 2^32/10^6].\\n    uint32 fulfillmentFlatFeeLinkDiscountPPM;\\n    // nativePremiumPercentage is the percentage of the total gas costs that is added to the final premium for native payment\\n    // nativePremiumPercentage = 10 means 10% of the total gas costs is added. only integral percentage is allowed\\n    uint8 nativePremiumPercentage;\\n    // linkPremiumPercentage is the percentage of total gas costs that is added to the final premium for link payment\\n    // linkPremiumPercentage = 10 means 10% of the total gas costs is added. only integral percentage is allowed\\n    uint8 linkPremiumPercentage;\\n  }\\n  Config public s_config;\\n\\n  error Reentrant();\\n  modifier nonReentrant() {\\n    _nonReentrant();\\n    _;\\n  }\\n\\n  function _nonReentrant() internal view {\\n    if (s_config.reentrancyLock) {\\n      revert Reentrant();\\n    }\\n  }\\n\\n  function _requireSufficientBalance(bool condition) internal pure {\\n    if (!condition) {\\n      revert InsufficientBalance();\\n    }\\n  }\\n\\n  function _requireValidSubscription(address subOwner) internal pure {\\n    if (subOwner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n  }\\n  constructor() ConfirmedOwner(msg.sender) {}\\n\\n  /**\\n   * @notice set the LINK token contract and link native feed to be\\n   * used by this coordinator\\n   * @param link - address of link token\\n   * @param linkNativeFeed address of the link native feed\\n   */\\n  function setLINKAndLINKNativeFeed(address link, address linkNativeFeed) external onlyOwner {\\n    // Disallow re-setting link token because the logic wouldn't really make sense\\n    if (address(LINK) != address(0)) {\\n      revert LinkAlreadySet();\\n    }\\n    LINK = LinkTokenInterface(link);\\n    LINK_NATIVE_FEED = AggregatorV3Interface(linkNativeFeed);\\n  }\\n\\n  /**\\n   * @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n   * @param subId subscription id\\n   * @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n   */\\n  function ownerCancelSubscription(uint256 subId) external onlyOwner {\\n    address subOwner = s_subscriptionConfigs[subId].owner;\\n    _requireValidSubscription(subOwner);\\n    _cancelSubscriptionHelper(subId, subOwner);\\n  }\\n\\n  /**\\n   * @notice Recover link sent with transfer instead of transferAndCall.\\n   * @param to address to send link to\\n   */\\n  function recoverFunds(address to) external onlyOwner {\\n    // If LINK is not set, we cannot recover funds.\\n    // It is possible that this coordinator address was funded with LINK\\n    // by accident by a user but the LINK token needs to be set first\\n    // before we can recover it.\\n    if (address(LINK) == address(0)) {\\n      revert LinkNotSet();\\n    }\\n\\n    uint256 externalBalance = LINK.balanceOf(address(this));\\n    uint256 internalBalance = uint256(s_totalBalance);\\n    if (internalBalance > externalBalance) {\\n      revert BalanceInvariantViolated(internalBalance, externalBalance);\\n    }\\n    if (internalBalance < externalBalance) {\\n      uint256 amount = externalBalance - internalBalance;\\n      if (!LINK.transfer(to, amount)) {\\n        revert FailedToTransferLink();\\n      }\\n      emit FundsRecovered(to, amount);\\n    }\\n    // If the balances are equal, nothing to be done.\\n  }\\n\\n  /**\\n   * @notice Recover native sent with transfer/call/send instead of fundSubscription.\\n   * @param to address to send native to\\n   */\\n  function recoverNativeFunds(address payable to) external onlyOwner {\\n    uint256 externalBalance = address(this).balance;\\n    uint256 internalBalance = uint256(s_totalNativeBalance);\\n    if (internalBalance > externalBalance) {\\n      revert BalanceInvariantViolated(internalBalance, externalBalance);\\n    }\\n    if (internalBalance < externalBalance) {\\n      uint256 amount = externalBalance - internalBalance;\\n      (bool sent, ) = to.call{value: amount}(\\\"\\\");\\n      if (!sent) {\\n        revert FailedToSendNative();\\n      }\\n      emit NativeFundsRecovered(to, amount);\\n    }\\n    // If the balances are equal, nothing to be done.\\n  }\\n\\n  /*\\n   * @notice withdraw LINK earned through fulfilling requests\\n   * @param recipient where to send the funds\\n   * @param amount amount to withdraw\\n   */\\n  function withdraw(address recipient) external nonReentrant onlyOwner {\\n    if (address(LINK) == address(0)) {\\n      revert LinkNotSet();\\n    }\\n    uint96 amount = s_withdrawableTokens;\\n    _requireSufficientBalance(amount > 0);\\n    s_withdrawableTokens = 0;\\n    s_totalBalance -= amount;\\n    _requireSufficientBalance(LINK.transfer(recipient, amount));\\n  }\\n\\n  /*\\n   * @notice withdraw native earned through fulfilling requests\\n   * @param recipient where to send the funds\\n   * @param amount amount to withdraw\\n   */\\n  function withdrawNative(address payable recipient) external nonReentrant onlyOwner {\\n    uint96 amount = s_withdrawableNative;\\n    _requireSufficientBalance(amount > 0);\\n    // Prevent re-entrancy by updating state before transfer.\\n    s_withdrawableNative = 0;\\n    s_totalNativeBalance -= amount;\\n    _mustSendNative(recipient, amount);\\n  }\\n\\n  function onTokenTransfer(address /* sender */, uint256 amount, bytes calldata data) external override nonReentrant {\\n    if (msg.sender != address(LINK)) {\\n      revert OnlyCallableFromLink();\\n    }\\n    if (data.length != 32) {\\n      revert InvalidCalldata();\\n    }\\n    uint256 subId = abi.decode(data, (uint256));\\n    _requireValidSubscription(s_subscriptionConfigs[subId].owner);\\n    // We do not check that the sender is the subscription owner,\\n    // anyone can fund a subscription.\\n    uint256 oldBalance = s_subscriptions[subId].balance;\\n    s_subscriptions[subId].balance += uint96(amount);\\n    s_totalBalance += uint96(amount);\\n    emit SubscriptionFunded(subId, oldBalance, oldBalance + amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable override nonReentrant {\\n    _requireValidSubscription(s_subscriptionConfigs[subId].owner);\\n    // We do not check that the msg.sender is the subscription owner,\\n    // anyone can fund a subscription.\\n    // We also do not check that msg.value > 0, since that's just a no-op\\n    // and would be a waste of gas on the caller's part.\\n    uint256 oldNativeBalance = s_subscriptions[subId].nativeBalance;\\n    s_subscriptions[subId].nativeBalance += uint96(msg.value);\\n    s_totalNativeBalance += uint96(msg.value);\\n    emit SubscriptionFundedWithNative(subId, oldNativeBalance, oldNativeBalance + msg.value);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    public\\n    view\\n    override\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address subOwner, address[] memory consumers)\\n  {\\n    subOwner = s_subscriptionConfigs[subId].owner;\\n    _requireValidSubscription(subOwner);\\n    return (\\n      s_subscriptions[subId].balance,\\n      s_subscriptions[subId].nativeBalance,\\n      s_subscriptions[subId].reqCount,\\n      subOwner,\\n      s_subscriptionConfigs[subId].consumers\\n    );\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function getActiveSubscriptionIds(\\n    uint256 startIndex,\\n    uint256 maxCount\\n  ) external view override returns (uint256[] memory ids) {\\n    uint256 numSubs = s_subIds.length();\\n    if (startIndex >= numSubs) revert IndexOutOfRange();\\n    uint256 endIndex = startIndex + maxCount;\\n    endIndex = endIndex > numSubs || maxCount == 0 ? numSubs : endIndex;\\n    uint256 idsLength = endIndex - startIndex;\\n    ids = new uint256[](idsLength);\\n    for (uint256 idx = 0; idx < idsLength; ++idx) {\\n      ids[idx] = s_subIds.at(idx + startIndex);\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function createSubscription() external override nonReentrant returns (uint256 subId) {\\n    // Generate a subscription id that is globally unique.\\n    uint64 currentSubNonce = s_currentSubNonce;\\n    subId = uint256(\\n      keccak256(abi.encodePacked(msg.sender, blockhash(block.number - 1), address(this), currentSubNonce))\\n    );\\n    // Increment the subscription nonce counter.\\n    s_currentSubNonce = currentSubNonce + 1;\\n    // Initialize storage variables.\\n    address[] memory consumers = new address[](0);\\n    s_subscriptions[subId] = Subscription({balance: 0, nativeBalance: 0, reqCount: 0});\\n    s_subscriptionConfigs[subId] = SubscriptionConfig({\\n      owner: msg.sender,\\n      requestedOwner: address(0),\\n      consumers: consumers\\n    });\\n    // Update the s_subIds set, which tracks all subscription ids created in this contract.\\n    s_subIds.add(subId);\\n\\n    emit SubscriptionCreated(subId, msg.sender);\\n    return subId;\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function requestSubscriptionOwnerTransfer(\\n    uint256 subId,\\n    address newOwner\\n  ) external override onlySubOwner(subId) nonReentrant {\\n    // Proposing to address(0) would never be claimable so don't need to check.\\n    SubscriptionConfig storage subscriptionConfig = s_subscriptionConfigs[subId];\\n    if (subscriptionConfig.requestedOwner != newOwner) {\\n      subscriptionConfig.requestedOwner = newOwner;\\n      emit SubscriptionOwnerTransferRequested(subId, msg.sender, newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external override nonReentrant {\\n    address oldOwner = s_subscriptionConfigs[subId].owner;\\n    _requireValidSubscription(oldOwner);\\n    if (s_subscriptionConfigs[subId].requestedOwner != msg.sender) {\\n      revert MustBeRequestedOwner(s_subscriptionConfigs[subId].requestedOwner);\\n    }\\n    s_subscriptionConfigs[subId].owner = msg.sender;\\n    s_subscriptionConfigs[subId].requestedOwner = address(0);\\n    emit SubscriptionOwnerTransferred(subId, oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function addConsumer(uint256 subId, address consumer) external override onlySubOwner(subId) nonReentrant {\\n    ConsumerConfig storage consumerConfig = s_consumers[consumer][subId];\\n    if (consumerConfig.active) {\\n      // Idempotence - do nothing if already added.\\n      // Ensures uniqueness in s_subscriptions[subId].consumers.\\n      return;\\n    }\\n    // Already maxed, cannot add any more consumers.\\n    address[] storage consumers = s_subscriptionConfigs[subId].consumers;\\n    if (consumers.length == MAX_CONSUMERS) {\\n      revert TooManyConsumers();\\n    }\\n    // consumerConfig.nonce is 0 if the consumer had never sent a request to this subscription\\n    // otherwise, consumerConfig.nonce is non-zero\\n    // in both cases, use consumerConfig.nonce as is and set active status to true\\n    consumerConfig.active = true;\\n    consumers.push(consumer);\\n\\n    emit SubscriptionConsumerAdded(subId, consumer);\\n  }\\n\\n  function _deleteSubscription(uint256 subId) internal returns (uint96 balance, uint96 nativeBalance) {\\n    address[] storage consumers = s_subscriptionConfigs[subId].consumers;\\n    balance = s_subscriptions[subId].balance;\\n    nativeBalance = s_subscriptions[subId].nativeBalance;\\n    // Note bounded by MAX_CONSUMERS;\\n    // If no consumers, does nothing.\\n    uint256 consumersLength = consumers.length;\\n    for (uint256 i = 0; i < consumersLength; ++i) {\\n      delete s_consumers[consumers[i]][subId];\\n    }\\n    delete s_subscriptionConfigs[subId];\\n    delete s_subscriptions[subId];\\n    s_subIds.remove(subId);\\n    if (balance != 0) {\\n      s_totalBalance -= balance;\\n    }\\n    if (nativeBalance != 0) {\\n      s_totalNativeBalance -= nativeBalance;\\n    }\\n    return (balance, nativeBalance);\\n  }\\n\\n  function _cancelSubscriptionHelper(uint256 subId, address to) internal {\\n    (uint96 balance, uint96 nativeBalance) = _deleteSubscription(subId);\\n\\n    // Only withdraw LINK if the token is active and there is a balance.\\n    if (address(LINK) != address(0) && balance != 0) {\\n      _requireSufficientBalance(LINK.transfer(to, uint256(balance)));\\n    }\\n\\n    // send native to the \\\"to\\\" address using call\\n    _mustSendNative(to, uint256(nativeBalance));\\n    emit SubscriptionCanceled(subId, to, balance, nativeBalance);\\n  }\\n\\n  modifier onlySubOwner(uint256 subId) {\\n    _onlySubOwner(subId);\\n    _;\\n  }\\n\\n  function _onlySubOwner(uint256 subId) internal view {\\n    address subOwner = s_subscriptionConfigs[subId].owner;\\n    _requireValidSubscription(subOwner);\\n    if (msg.sender != subOwner) {\\n      revert MustBeSubOwner(subOwner);\\n    }\\n  }\\n\\n  function _mustSendNative(address to, uint256 amount) internal {\\n    (bool success, ) = to.call{value: amount}(\\\"\\\");\\n    if (!success) {\\n      revert FailedToSendNative();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3687ca9adb25fa3b7645a1f7840e73f8ca3d87dd5f19ebc93cea76db5866717e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// A mock for testing code that relies on VRFCoordinatorV2_5.\\npragma solidity ^0.8.19;\\n\\n// solhint-disable-next-line no-unused-import\\nimport {IVRFCoordinatorV2Plus, IVRFSubscriptionV2Plus} from \\\"../dev/interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"../dev/libraries/VRFV2PlusClient.sol\\\";\\nimport {SubscriptionAPI} from \\\"../dev/SubscriptionAPI.sol\\\";\\nimport {VRFConsumerBaseV2Plus} from \\\"../dev/VRFConsumerBaseV2Plus.sol\\\";\\n\\ncontract VRFCoordinatorV2_5Mock is SubscriptionAPI, IVRFCoordinatorV2Plus {\\n  uint96 public immutable i_base_fee;\\n  uint96 public immutable i_gas_price;\\n  int256 public immutable i_wei_per_unit_link;\\n\\n  error InvalidRequest();\\n  error InvalidRandomWords();\\n  error InvalidExtraArgsTag();\\n  error NotImplemented();\\n\\n  event RandomWordsRequested(\\n    bytes32 indexed keyHash,\\n    uint256 requestId,\\n    uint256 preSeed,\\n    uint256 indexed subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords,\\n    bytes extraArgs,\\n    address indexed sender\\n  );\\n  event RandomWordsFulfilled(\\n    uint256 indexed requestId,\\n    uint256 outputSeed,\\n    uint256 indexed subId,\\n    uint96 payment,\\n    bool nativePayment,\\n    bool success,\\n    bool onlyPremium\\n  );\\n  event ConfigSet();\\n\\n  uint64 internal s_currentSubId;\\n  uint256 internal s_nextRequestId = 1;\\n  uint256 internal s_nextPreSeed = 100;\\n\\n  struct Request {\\n    uint256 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n  mapping(uint256 => Request) internal s_requests; /* requestId */ /* request */\\n\\n  constructor(uint96 _baseFee, uint96 _gasPrice, int256 _weiPerUnitLink) SubscriptionAPI() {\\n    i_base_fee = _baseFee;\\n    i_gas_price = _gasPrice;\\n    i_wei_per_unit_link = _weiPerUnitLink;\\n    setConfig();\\n  }\\n\\n  /**\\n   * @notice Sets the configuration of the vrfv2 mock coordinator\\n   */\\n  function setConfig() public onlyOwner {\\n    s_config = Config({\\n      minimumRequestConfirmations: 0,\\n      maxGasLimit: 0,\\n      stalenessSeconds: 0,\\n      gasAfterPaymentCalculation: 0,\\n      reentrancyLock: false,\\n      fulfillmentFlatFeeNativePPM: 0,\\n      fulfillmentFlatFeeLinkDiscountPPM: 0,\\n      nativePremiumPercentage: 0,\\n      linkPremiumPercentage: 0\\n    });\\n    emit ConfigSet();\\n  }\\n\\n  function consumerIsAdded(uint256 _subId, address _consumer) public view returns (bool) {\\n    return s_consumers[_consumer][_subId].active;\\n  }\\n\\n  modifier onlyValidConsumer(uint256 _subId, address _consumer) {\\n    if (!consumerIsAdded(_subId, _consumer)) {\\n      revert InvalidConsumer(_subId, _consumer);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\\n   * @notice consumer.\\n   *\\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\\n   * @dev against the real coordinator a small amount of additional LINK is required.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   */\\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   * @param _words user-provided random words\\n   */\\n  function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\\n    uint256 startGas = gasleft();\\n    if (s_requests[_requestId].subId == 0) {\\n      revert InvalidRequest();\\n    }\\n    Request memory req = s_requests[_requestId];\\n\\n    if (_words.length == 0) {\\n      _words = new uint256[](req.numWords);\\n      for (uint256 i = 0; i < req.numWords; i++) {\\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\\n      }\\n    } else if (_words.length != req.numWords) {\\n      revert InvalidRandomWords();\\n    }\\n\\n    VRFConsumerBaseV2Plus v;\\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\\n    s_config.reentrancyLock = true;\\n    // solhint-disable-next-line avoid-low-level-calls, no-unused-vars\\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\\n    s_config.reentrancyLock = false;\\n\\n    bool nativePayment = uint8(req.extraArgs[req.extraArgs.length - 1]) == 1;\\n\\n    uint256 rawPayment = i_base_fee + ((startGas - gasleft()) * i_gas_price);\\n    if (!nativePayment) {\\n      rawPayment = (1e18 * rawPayment) / uint256(i_wei_per_unit_link);\\n    }\\n    uint96 payment = uint96(rawPayment);\\n\\n    _chargePayment(payment, nativePayment, req.subId);\\n\\n    delete (s_requests[_requestId]);\\n    emit RandomWordsFulfilled(_requestId, _requestId, req.subId, payment, nativePayment, success, false);\\n  }\\n\\n  function _chargePayment(uint96 payment, bool nativePayment, uint256 subId) internal {\\n    Subscription storage subcription = s_subscriptions[subId];\\n    if (nativePayment) {\\n      uint96 prevBal = subcription.nativeBalance;\\n      if (prevBal < payment) {\\n        revert InsufficientBalance();\\n      }\\n      subcription.nativeBalance = prevBal - payment;\\n      s_withdrawableNative += payment;\\n    } else {\\n      uint96 prevBal = subcription.balance;\\n      if (prevBal < payment) {\\n        revert InsufficientBalance();\\n      }\\n      subcription.balance = prevBal - payment;\\n      s_withdrawableTokens += payment;\\n    }\\n  }\\n\\n  /**\\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\\n   *\\n   * @param _subId the subscription to fund\\n   * @param _amount the amount to fund\\n   */\\n  function fundSubscription(uint256 _subId, uint256 _amount) public {\\n    if (s_subscriptionConfigs[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    uint256 oldBalance = s_subscriptions[_subId].balance;\\n    s_subscriptions[_subId].balance += uint96(_amount);\\n    s_totalBalance += uint96(_amount);\\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\\n  }\\n\\n  /// @dev Convert the extra args bytes into a struct\\n  /// @param extraArgs The extra args bytes\\n  /// @return The extra args struct\\n  function _fromBytes(bytes calldata extraArgs) internal pure returns (VRFV2PlusClient.ExtraArgsV1 memory) {\\n    if (extraArgs.length == 0) {\\n      return VRFV2PlusClient.ExtraArgsV1({nativePayment: false});\\n    }\\n    if (bytes4(extraArgs) != VRFV2PlusClient.EXTRA_ARGS_V1_TAG) revert InvalidExtraArgsTag();\\n    return abi.decode(extraArgs[4:], (VRFV2PlusClient.ExtraArgsV1));\\n  }\\n\\n  function requestRandomWords(\\n    VRFV2PlusClient.RandomWordsRequest calldata _req\\n  ) external override nonReentrant onlyValidConsumer(_req.subId, msg.sender) returns (uint256) {\\n    uint256 subId = _req.subId;\\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n\\n    uint256 requestId = s_nextRequestId++;\\n    uint256 preSeed = s_nextPreSeed++;\\n\\n    bytes memory extraArgsBytes = VRFV2PlusClient._argsToBytes(_fromBytes(_req.extraArgs));\\n    s_requests[requestId] = Request({\\n      subId: _req.subId,\\n      callbackGasLimit: _req.callbackGasLimit,\\n      numWords: _req.numWords,\\n      extraArgs: _req.extraArgs\\n    });\\n\\n    emit RandomWordsRequested(\\n      _req.keyHash,\\n      requestId,\\n      preSeed,\\n      _req.subId,\\n      _req.requestConfirmations,\\n      _req.callbackGasLimit,\\n      _req.numWords,\\n      extraArgsBytes,\\n      msg.sender\\n    );\\n    return requestId;\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function removeConsumer(\\n    uint256 _subId,\\n    address _consumer\\n  ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\\n    if (!s_consumers[_consumer][_subId].active) {\\n      revert InvalidConsumer(_subId, _consumer);\\n    }\\n    address[] memory consumers = s_subscriptionConfigs[_subId].consumers;\\n    uint256 lastConsumerIndex = consumers.length - 1;\\n    for (uint256 i = 0; i < consumers.length; ++i) {\\n      if (consumers[i] == _consumer) {\\n        address last = consumers[lastConsumerIndex];\\n        s_subscriptionConfigs[_subId].consumers[i] = last;\\n        s_subscriptionConfigs[_subId].consumers.pop();\\n        break;\\n      }\\n    }\\n    s_consumers[_consumer][_subId].active = false;\\n    emit SubscriptionConsumerRemoved(_subId, _consumer);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFSubscriptionV2Plus\\n   */\\n  function cancelSubscription(uint256 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\\n    (uint96 balance, uint96 nativeBalance) = _deleteSubscription(_subId);\\n\\n    (bool success, ) = _to.call{value: uint256(nativeBalance)}(\\\"\\\");\\n    if (!success) {\\n      revert FailedToSendNative();\\n    }\\n    emit SubscriptionCanceled(_subId, _to, balance, nativeBalance);\\n  }\\n\\n  function pendingRequestExists(uint256 /*subId*/) public pure override returns (bool) {\\n    revert NotImplemented();\\n  }\\n}\\n\",\"keccak256\":\"0x5d27319ad572630b7078be005a9dee4418ac60b7d2fe9cbe40b510830cb4d1cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c80638b673e7a11610118578063aefb212f116100a0578063dac83d291161006f578063dac83d2914610748578063dc311dd314610771578063dcab3dcf146107b2578063e72f6e30146107dd578063f2fde38b146108065761020f565b8063aefb212f14610690578063b2a7cac5146106cd578063bec4c08c146106f6578063cb6317971461071f5761020f565b80639b1c385e116100e75780639b1c385e146105ab5780639d40a6fd146105e8578063a21a23e414610613578063a4c0ed361461063e578063aa433aff146106675761020f565b80638b673e7a146105105780638da5cb5b14610527578063953e9c751461055257806395b55cfc1461058f5761020f565b806341af6c871161019b57806372e9d5651161016a57806372e9d5651461045157806379ba50971461047c578063808974ff146104935780638402595e146104bc57806386fe91c7146104e55761020f565b806341af6c871461039757806351cff8d9146103d457806364d51a2a146103fd57806365982744146104285761020f565b806313478329116101e257806313478329146102c257806318e3dd27146102ed5780631b6b6d23146103185780631eebc117146103435780632f622e6b1461036e5761020f565b8063088070f51461021457806308e3898e146102475780630ae0954014610270578063115e3c0d14610299575b600080fd5b34801561022057600080fd5b5061022961082f565b60405161023e99989796959493929190614612565b60405180910390f35b34801561025357600080fd5b5061026e600480360381019061026991906148a0565b6108f0565b005b34801561027c57600080fd5b506102976004803603810190610292919061490f565b610e63565b005b3480156102a557600080fd5b506102c060048036038101906102bb919061494f565b610f7a565b005b3480156102ce57600080fd5b506102d7611163565b6040516102e491906149a8565b60405180910390f35b3480156102f957600080fd5b50610302611187565b60405161030f91906149ea565b60405180910390f35b34801561032457600080fd5b5061032d6111a5565b60405161033a9190614a64565b60405180910390f35b34801561034f57600080fd5b506103586111cb565b60405161036591906149ea565b60405180910390f35b34801561037a57600080fd5b5061039560048036038101906103909190614abd565b6111ef565b005b3480156103a357600080fd5b506103be60048036038101906103b99190614aea565b6112dd565b6040516103cb9190614b17565b60405180910390f35b3480156103e057600080fd5b506103fb60048036038101906103f69190614b32565b611311565b005b34801561040957600080fd5b50610412611517565b60405161041f9190614b5f565b60405180910390f35b34801561043457600080fd5b5061044f600480360381019061044a9190614b7a565b61151c565b005b34801561045d57600080fd5b50610466611632565b6040516104739190614bdb565b60405180910390f35b34801561048857600080fd5b50610491611658565b005b34801561049f57600080fd5b506104ba60048036038101906104b5919061490f565b6117ed565b005b3480156104c857600080fd5b506104e360048036038101906104de9190614abd565b61184d565b005b3480156104f157600080fd5b506104fa6119ca565b60405161050791906149ea565b60405180910390f35b34801561051c57600080fd5b506105256119e8565b005b34801561053357600080fd5b5061053c611bdf565b6040516105499190614c05565b60405180910390f35b34801561055e57600080fd5b506105796004803603810190610574919061490f565b611c08565b6040516105869190614b17565b60405180910390f35b6105a960048036038101906105a49190614aea565b611c73565b005b3480156105b757600080fd5b506105d260048036038101906105cd9190614c44565b611e06565b6040516105df9190614c9c565b60405180910390f35b3480156105f457600080fd5b506105fd612133565b60405161060a9190614cda565b60405180910390f35b34801561061f57600080fd5b5061062861214d565b6040516106359190614c9c565b60405180910390f35b34801561064a57600080fd5b5061066560048036038101906106609190614d50565b612485565b005b34801561067357600080fd5b5061068e60048036038101906106899190614aea565b6126f3565b005b34801561069c57600080fd5b506106b760048036038101906106b2919061494f565b61274d565b6040516106c49190614e82565b60405180910390f35b3480156106d957600080fd5b506106f460048036038101906106ef9190614aea565b61287b565b005b34801561070257600080fd5b5061071d6004803603810190610718919061490f565b612a8c565b005b34801561072b57600080fd5b506107466004803603810190610741919061490f565b612c2a565b005b34801561075457600080fd5b5061076f600480360381019061076a919061490f565b612fe3565b005b34801561077d57600080fd5b5061079860048036038101906107939190614aea565b6130e7565b6040516107a9959493929190614f62565b60405180910390f35b3480156107be57600080fd5b506107c761326c565b6040516107d491906149ea565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff9190614b32565b613290565b005b34801561081257600080fd5b5061082d60048036038101906108289190614b32565b613562565b005b600c8060000160009054906101000a900461ffff16908060000160029054906101000a900463ffffffff16908060000160069054906101000a900460ff16908060000160079054906101000a900463ffffffff169080600001600b9054906101000a900463ffffffff169080600001600f9054906101000a900463ffffffff16908060000160139054906101000a900463ffffffff16908060000160179054906101000a900460ff16908060000160189054906101000a900460ff16905089565b60005a90506000601060008681526020019081526020016000206000015403610945576040517f41abc80100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060106000868152602001908152602001600020604051806080016040529081600082015481526020016001820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820180546109cb90614feb565b80601f01602080910402602001604051908101604052809291908181526020018280546109f790614feb565b8015610a445780601f10610a1957610100808354040283529160200191610a44565b820191906000526020600020905b815481529060010190602001808311610a2757829003601f168201915b50505050508152505090506000835103610b2057806040015163ffffffff1667ffffffffffffffff811115610a7c57610a7b61475d565b5b604051908082528060200260200182016040528015610aaa5781602001602082028036833780820191505090505b50925060005b816040015163ffffffff16811015610b1a578581604051602001610ad592919061501c565b6040516020818303038152906040528051906020012060001c848281518110610b0157610b00615045565b5b6020026020010181815250508080600101915050610ab0565b50610b65565b806040015163ffffffff16835114610b64576040517f3f3df5b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600080631fe543e360e01b8786604051602401610b83929190615074565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506001600c60000160066101000a81548160ff02191690831515021790555060008673ffffffffffffffffffffffffffffffffffffffff16846020015163ffffffff1683604051610c329190615115565b60006040518083038160008787f1925050503d8060008114610c70576040519150601f19603f3d011682016040523d82523d6000602084013e610c75565b606091505b505090506000600c60000160066101000a81548160ff0219169083151502179055506000600185606001516001876060015151610cb2919061515b565b81518110610cc357610cc2615045565b5b602001015160f81c60f81b60f81c60ff1614905060007f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff165a88610d14919061515b565b610d1e919061518f565b7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff16610d5791906151d1565b905081610da0577f000000000000000000000000000000000000000000000000000000000000000081670de0b6b3a7640000610d93919061518f565b610d9d9190615234565b90505b6000819050610db481848960000151613576565b601060008c81526020019081526020016000206000808201600090556001820160006101000a81549063ffffffff02191690556001820160046101000a81549063ffffffff0219169055600282016000610e0e9190614482565b505086600001518b7faeb4b4786571e184246d39587f659abf0e26f41f6a3358692250382c0cdb47b78d8487896000604051610e4e959493929190615265565b60405180910390a35050505050505050505050565b81610e6d816137b9565b610e75613871565b600080610e81856138bd565b9150915060008473ffffffffffffffffffffffffffffffffffffffff16826bffffffffffffffffffffffff16604051610eb9906152de565b60006040518083038185875af1925050503d8060008114610ef6576040519150601f19603f3d011682016040523d82523d6000602084013e610efb565b606091505b5050905080610f36576040517f950b247900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b857f8c74ce8b8cf87f5eb001275c8be27eb34ea2b62bfab6814fcc62192bb63e81c4868585604051610f6a93929190615324565b60405180910390a2505050505050565b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611016576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006006600084815260200190815260200160002060000160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050816006600085815260200190815260200160002060000160008282829054906101000a90046bffffffffffffffffffffffff16611094919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081600a60008282829054906101000a90046bffffffffffffffffffffffff166110eb919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550827f1ced9348ff549fceab2ac57cd3a9de38edaaab274b725ee82c23e8fc8c4eec7a82848461114891906151d1565b60405161115692919061501c565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a600c9054906101000a90046bffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6111f7613871565b6111ff613c11565b6000600b600c9054906101000a90046bffffffffffffffffffffffff1690506112386000826bffffffffffffffffffffffff1611613ca1565b6000600b600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555080600a600c8282829054906101000a90046bffffffffffffffffffffffff16611293919061539b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506112d982826bffffffffffffffffffffffff16613cdb565b5050565b60006040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611319613871565b611321613c11565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036113a9576040517fc1f0c0a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b60009054906101000a90046bffffffffffffffffffffffff1690506113e26000826bffffffffffffffffffffffff1611613ca1565b6000600b60006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555080600a60008282829054906101000a90046bffffffffffffffffffffffff1661143d919061539b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550611513600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016114cb9291906153db565b6020604051808303816000875af11580156114ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150e9190615430565b613ca1565b5050565b606481565b611524613c11565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115ac576040517f2d118a6e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df906154ba565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6117f5613871565b6118498282600067ffffffffffffffff8111156118155761181461475d565b5b6040519080825280602002602001820160405280156118435781602001602082028036833780820191505090505b506108f0565b5050565b611855613c11565b60004790506000600a600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050818111156118ce5780826040517fa99da3020000000000000000000000000000000000000000000000000000000081526004016118c592919061501c565b60405180910390fd5b818110156119c557600081836118e4919061515b565b905060008473ffffffffffffffffffffffffffffffffffffffff168260405161190c906152de565b60006040518083038185875af1925050503d8060008114611949576040519150601f19603f3d011682016040523d82523d6000602084013e61194e565b606091505b5050905080611989576040517f950b247900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4aed7c8eed0496c8c19ea2681fcca25741c1602342e38b045d9f1e8e905d2e9c85836040516119ba9291906154fb565b60405180910390a150505b505050565b600a60009054906101000a90046bffffffffffffffffffffffff1681565b6119f0613c11565b604051806101200160405280600061ffff168152602001600063ffffffff168152602001600015158152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060ff168152602001600060ff16815250600c60008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160066101000a81548160ff02191690831515021790555060608201518160000160076101000a81548163ffffffff021916908363ffffffff160217905550608082015181600001600b6101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600001600f6101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160000160136101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160000160176101000a81548160ff021916908360ff1602179055506101008201518160000160186101000a81548160ff021916908360ff1602179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900460ff16905092915050565b611c7b613871565b611cba6005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613d83565b600060066000838152602001908152602001600020600001600c9054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff1690503460066000848152602001908152602001600020600001600c8282829054906101000a90046bffffffffffffffffffffffff16611d38919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555034600a600c8282829054906101000a90046bffffffffffffffffffffffff16611d8f919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550817f7603b205d03651ee812f803fccde89f1012e545a9c99f0abfea9cedd0fd8e902823484611dec91906151d1565b604051611dfa92919061501c565b60405180910390a25050565b6000611e10613871565b816020013533611e208282611c08565b611e635781816040517f79bfd401000000000000000000000000000000000000000000000000000000008152600401611e5a929190615524565b60405180910390fd5b600084602001359050600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611f08576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e6000815480929190611f1d9061554d565b9190505590506000600f6000815480929190611f389061554d565b9190505590506000611f60611f5b898060a00190611f5691906155a4565b613dec565b613ee4565b9050604051806080016040528089602001358152602001896060016020810190611f8a9190615633565b63ffffffff168152602001896080016020810190611fa89190615633565b63ffffffff168152602001898060a00190611fc391906155a4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250601060008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160046101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020190816120899190615802565b509050503373ffffffffffffffffffffffffffffffffffffffff16886020013589600001357feb0e3652e0f44f417695e6e90f2f42c99b65cd7169074c5a654b16b9748c3a4e86868d60400160208101906120e49190615900565b8e60600160208101906120f79190615633565b8f608001602081019061210a9190615633565b8960405161211d96959493929190615977565b60405180910390a4829650505050505050919050565b600760009054906101000a900467ffffffffffffffff1681565b6000612157613871565b6000600760009054906101000a900467ffffffffffffffff16905033600143612180919061515b565b4030836040516020016121969493929190615a88565b6040516020818303038152906040528051906020012060001c91506001816121be9190615ad6565b600760006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008067ffffffffffffffff8111156122025761220161475d565b5b6040519080825280602002602001820160405280156122305781602001602082028036833780820191505090505b509050604051806060016040528060006bffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600067ffffffffffffffff168152506006600085815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060408201518160000160186101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001828152506005600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061242f9291906144c2565b50905050612447836008613f7c90919063ffffffff16565b50827f1d3015d7ba850fa198dc7b1a3f5d42779313a681035f77c8c03764c61005518d336040516124789190614c05565b60405180910390a2505090565b61248d613871565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612514576040517f44b0e3c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208282905014612551576040517f8129bbcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082828101906125629190614aea565b90506125a36005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613d83565b60006006600083815260200190815260200160002060000160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050846006600084815260200190815260200160002060000160008282829054906101000a90046bffffffffffffffffffffffff16612621919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555084600a60008282829054906101000a90046bffffffffffffffffffffffff16612678919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550817f1ced9348ff549fceab2ac57cd3a9de38edaaab274b725ee82c23e8fc8c4eec7a8287846126d591906151d1565b6040516126e392919061501c565b60405180910390a2505050505050565b6126fb613c11565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061273f81613d83565b6127498282613f96565b5050565b6060600061275b600861412a565b9050808410612796576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083856127a491906151d1565b9050818111806127b45750600084145b6127be57806127c0565b815b9050600085826127d0919061515b565b90508067ffffffffffffffff8111156127ec576127eb61475d565b5b60405190808252806020026020018201604052801561281a5781602001602082028036833780820191505090505b50935060005b8181101561287157612847878261283791906151d1565b600861413f90919063ffffffff16565b85828151811061285a57612859615045565b5b602002602001018181525050806001019050612820565b5050505092915050565b612883613871565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506128c781613d83565b3373ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146129a3576005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517fd084e97500000000000000000000000000000000000000000000000000000000815260040161299a9190614c05565b60405180910390fd5b336005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006005600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817fd4114ab6e9af9f597c52041f32d62dc57c5c4e4c0d4427006069635e216c93868233604051612a80929190615b12565b60405180910390a25050565b81612a96816137b9565b612a9e613871565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002090508060000160009054906101000a900460ff1615612b0f5750612c25565b6000600560008681526020019081526020016000206002019050606461ffff16818054905003612b6b576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018260000160006101000a81548160ff02191690831515021790555080849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550847f1e980d04aa7648e205713e5e8ea3808672ac163d10936d36f91b2c88ac1575e185604051612c1a9190614c05565b60405180910390a250505b505050565b81612c34816137b9565b8282612c408282611c08565b612c835781816040517f79bfd401000000000000000000000000000000000000000000000000000000008152600401612c7a929190615524565b60405180910390fd5b612c8b613871565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060000160009054906101000a900460ff16612d2f5784846040517f79bfd401000000000000000000000000000000000000000000000000000000008152600401612d26929190615524565b60405180910390fd5b600060056000878152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015612dc757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d7d575b50505050509050600060018251612dde919061515b565b905060005b8251811015612f35578673ffffffffffffffffffffffffffffffffffffffff16838281518110612e1657612e15615045565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603612f2a576000838381518110612e4e57612e4d615045565b5b6020026020010151905080600560008b81526020019081526020016000206002018381548110612e8157612e80615045565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560008a8152602001908152602001600020600201805480612eef57612eee615b3b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550612f35565b806001019050612de3565b506000600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160006101000a81548160ff021916908315150217905550867f32158c6058347c1601b2d12bc696ac6901d8a9a9aa3ba10c27ab0a983e8425a787604051612fd29190614c05565b60405180910390a250505050505050565b81612fed816137b9565b612ff5613871565b60006005600085815260200190815260200160002090508273ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146130e157828160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550837f21a4dad170a6bf476c31bbcf4a16628295b0e450672eec25d7c93308e05344a133856040516130d8929190615b12565b60405180910390a25b50505050565b60008060008060606005600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915061313182613d83565b6006600087815260200190815260200160002060000160009054906101000a90046bffffffffffffffffffffffff1660066000888152602001908152602001600020600001600c9054906101000a90046bffffffffffffffffffffffff166006600089815260200190815260200160002060000160189054906101000a900467ffffffffffffffff1684600560008b81526020019081526020016000206002018080548060200260200160405190810160405280929190818152602001828054801561325257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613208575b505050505090509450945094509450945091939590929450565b7f000000000000000000000000000000000000000000000000000000000000000081565b613298613c11565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603613320576040517fc1f0c0a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161337d9190614c05565b602060405180830381865afa15801561339a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133be9190615b7f565b90506000600a60009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050818111156134345780826040517fa99da30200000000000000000000000000000000000000000000000000000000815260040161342b92919061501c565b60405180910390fd5b8181101561355d576000818361344a919061515b565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b81526004016134a9929190615bac565b6020604051808303816000875af11580156134c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ec9190615430565b613522576040517f7c07fc4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f59bfc682b673f8cbf945f1e454df9334834abf7dfe7f92237ca29ecb9b4366008482604051613553929190615bac565b60405180910390a1505b505050565b61356a613c11565b61357381614159565b50565b600060066000838152602001908152602001600020905082156136a557600081600001600c9054906101000a90046bffffffffffffffffffffffff169050846bffffffffffffffffffffffff16816bffffffffffffffffffffffff16101561360a576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8481613616919061539b565b82600001600c6101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555084600b600c8282829054906101000a90046bffffffffffffffffffffffff16613671919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550506137b3565b60008160000160009054906101000a90046bffffffffffffffffffffffff169050846bffffffffffffffffffffffff16816bffffffffffffffffffffffff16101561371c576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8481613728919061539b565b8260000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555084600b60008282829054906101000a90046bffffffffffffffffffffffff16613783919061535b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b50505050565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506137fd81613d83565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461386d57806040517fd8a3fb520000000000000000000000000000000000000000000000000000000081526004016138649190614c05565b60405180910390fd5b5050565b600c60000160069054906101000a900460ff16156138bb576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008060006005600085815260200190815260200160002060020190506006600085815260200190815260200160002060000160009054906101000a90046bffffffffffffffffffffffff16925060066000858152602001908152602001600020600001600c9054906101000a90046bffffffffffffffffffffffff16915060008180549050905060005b81811015613a35576004600084838154811061396757613966615045565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549067ffffffffffffffff02191690556000820160096101000a81549067ffffffffffffffff02191690555050806001019050613948565b5060056000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000613aa8919061454c565b505060066000868152602001908152602001600020600080820160006101000a8154906bffffffffffffffffffffffff021916905560008201600c6101000a8154906bffffffffffffffffffffffff02191690556000820160186101000a81549067ffffffffffffffff02191690555050613b2d85600861428590919063ffffffff16565b506000846bffffffffffffffffffffffff1614613b9c5783600a60008282829054906101000a90046bffffffffffffffffffffffff16613b6d919061539b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505b6000836bffffffffffffffffffffffff1614613c0a5782600a600c8282829054906101000a90046bffffffffffffffffffffffff16613bdb919061539b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505b5050915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c9690615c21565b60405180910390fd5b565b80613cd8576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051613d01906152de565b60006040518083038185875af1925050503d8060008114613d3e576040519150601f19603f3d011682016040523d82523d6000602084013e613d43565b606091505b5050905080613d7e576040517f950b247900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613de9576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b613df461456d565b60008383905003613e18576040518060200160405280600015158152509050613ede565b7f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838390613e659190615c78565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614613ebb576040517f5247fdce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826004908092613ece93929190615ce1565b810190613edb9190615d72565b90505b92915050565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa82604051602401613f189190615dca565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b6000613f8e836000018360001b61429f565b905092915050565b600080613fa2846138bd565b91509150600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561401457506000826bffffffffffffffffffffffff1614155b156140d0576140cf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856bffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401614087929190615bac565b6020604051808303816000875af11580156140a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ca9190615430565b613ca1565b5b6140e883826bffffffffffffffffffffffff16613cdb565b837f8c74ce8b8cf87f5eb001275c8be27eb34ea2b62bfab6814fcc62192bb63e81c484848460405161411c93929190615324565b60405180910390a250505050565b60006141388260000161430f565b9050919050565b600061414e8360000183614320565b60001c905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036141c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141be90615e31565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6000614297836000018360001b61434b565b905092915050565b60006142ab838361445f565b614304578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050614309565b600090505b92915050565b600081600001805490509050919050565b600082600001828154811061433857614337615045565b5b9060005260206000200154905092915050565b6000808360010160008481526020019081526020016000205490506000811461445357600060018261437d919061515b565b9050600060018660000180549050614395919061515b565b90508181146144045760008660000182815481106143b6576143b5615045565b5b90600052602060002001549050808760000184815481106143da576143d9615045565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061441857614417615b3b565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050614459565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b50805461448e90614feb565b6000825580601f106144a057506144bf565b601f0160209004906000526020600020908101906144be9190614582565b5b50565b82805482825590600052602060002090810192821561453b579160200282015b8281111561453a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906144e2565b5b5090506145489190614582565b5090565b508054600082559060005260206000209081019061456a9190614582565b50565b60405180602001604052806000151581525090565b5b8082111561459b576000816000905550600101614583565b5090565b600061ffff82169050919050565b6145b68161459f565b82525050565b600063ffffffff82169050919050565b6145d5816145bc565b82525050565b60008115159050919050565b6145f0816145db565b82525050565b600060ff82169050919050565b61460c816145f6565b82525050565b600061012082019050614628600083018c6145ad565b614635602083018b6145cc565b614642604083018a6145e7565b61464f60608301896145cc565b61465c60808301886145cc565b61466960a08301876145cc565b61467660c08301866145cc565b61468360e0830185614603565b614691610100830184614603565b9a9950505050505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6146c6816146b3565b81146146d157600080fd5b50565b6000813590506146e3816146bd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614714826146e9565b9050919050565b61472481614709565b811461472f57600080fd5b50565b6000813590506147418161471b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6147958261474c565b810181811067ffffffffffffffff821117156147b4576147b361475d565b5b80604052505050565b60006147c761469f565b90506147d3828261478c565b919050565b600067ffffffffffffffff8211156147f3576147f261475d565b5b602082029050602081019050919050565b600080fd5b600061481c614817846147d8565b6147bd565b9050808382526020820190506020840283018581111561483f5761483e614804565b5b835b81811015614868578061485488826146d4565b845260208401935050602081019050614841565b5050509392505050565b600082601f83011261488757614886614747565b5b8135614897848260208601614809565b91505092915050565b6000806000606084860312156148b9576148b86146a9565b5b60006148c7868287016146d4565b93505060206148d886828701614732565b925050604084013567ffffffffffffffff8111156148f9576148f86146ae565b5b61490586828701614872565b9150509250925092565b60008060408385031215614926576149256146a9565b5b6000614934858286016146d4565b925050602061494585828601614732565b9150509250929050565b60008060408385031215614966576149656146a9565b5b6000614974858286016146d4565b9250506020614985858286016146d4565b9150509250929050565b6000819050919050565b6149a28161498f565b82525050565b60006020820190506149bd6000830184614999565b92915050565b60006bffffffffffffffffffffffff82169050919050565b6149e4816149c3565b82525050565b60006020820190506149ff60008301846149db565b92915050565b6000819050919050565b6000614a2a614a25614a20846146e9565b614a05565b6146e9565b9050919050565b6000614a3c82614a0f565b9050919050565b6000614a4e82614a31565b9050919050565b614a5e81614a43565b82525050565b6000602082019050614a796000830184614a55565b92915050565b6000614a8a826146e9565b9050919050565b614a9a81614a7f565b8114614aa557600080fd5b50565b600081359050614ab781614a91565b92915050565b600060208284031215614ad357614ad26146a9565b5b6000614ae184828501614aa8565b91505092915050565b600060208284031215614b0057614aff6146a9565b5b6000614b0e848285016146d4565b91505092915050565b6000602082019050614b2c60008301846145e7565b92915050565b600060208284031215614b4857614b476146a9565b5b6000614b5684828501614732565b91505092915050565b6000602082019050614b7460008301846145ad565b92915050565b60008060408385031215614b9157614b906146a9565b5b6000614b9f85828601614732565b9250506020614bb085828601614732565b9150509250929050565b6000614bc582614a31565b9050919050565b614bd581614bba565b82525050565b6000602082019050614bf06000830184614bcc565b92915050565b614bff81614709565b82525050565b6000602082019050614c1a6000830184614bf6565b92915050565b600080fd5b600060c08284031215614c3b57614c3a614c20565b5b81905092915050565b600060208284031215614c5a57614c596146a9565b5b600082013567ffffffffffffffff811115614c7857614c776146ae565b5b614c8484828501614c25565b91505092915050565b614c96816146b3565b82525050565b6000602082019050614cb16000830184614c8d565b92915050565b600067ffffffffffffffff82169050919050565b614cd481614cb7565b82525050565b6000602082019050614cef6000830184614ccb565b92915050565b600080fd5b60008083601f840112614d1057614d0f614747565b5b8235905067ffffffffffffffff811115614d2d57614d2c614cf5565b5b602083019150836001820283011115614d4957614d48614804565b5b9250929050565b60008060008060608587031215614d6a57614d696146a9565b5b6000614d7887828801614732565b9450506020614d89878288016146d4565b935050604085013567ffffffffffffffff811115614daa57614da96146ae565b5b614db687828801614cfa565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614df9816146b3565b82525050565b6000614e0b8383614df0565b60208301905092915050565b6000602082019050919050565b6000614e2f82614dc4565b614e398185614dcf565b9350614e4483614de0565b8060005b83811015614e75578151614e5c8882614dff565b9750614e6783614e17565b925050600181019050614e48565b5085935050505092915050565b60006020820190508181036000830152614e9c8184614e24565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614ed981614709565b82525050565b6000614eeb8383614ed0565b60208301905092915050565b6000602082019050919050565b6000614f0f82614ea4565b614f198185614eaf565b9350614f2483614ec0565b8060005b83811015614f55578151614f3c8882614edf565b9750614f4783614ef7565b925050600181019050614f28565b5085935050505092915050565b600060a082019050614f7760008301886149db565b614f8460208301876149db565b614f916040830186614ccb565b614f9e6060830185614bf6565b8181036080830152614fb08184614f04565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061500357607f821691505b60208210810361501657615015614fbc565b5b50919050565b60006040820190506150316000830185614c8d565b61503e6020830184614c8d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506150896000830185614c8d565b818103602083015261509b8184614e24565b90509392505050565b600081519050919050565b600081905092915050565b60005b838110156150d85780820151818401526020810190506150bd565b60008484015250505050565b60006150ef826150a4565b6150f981856150af565b93506151098185602086016150ba565b80840191505092915050565b600061512182846150e4565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000615166826146b3565b9150615171836146b3565b92508282039050818111156151895761518861512c565b5b92915050565b600061519a826146b3565b91506151a5836146b3565b92508282026151b3816146b3565b915082820484148315176151ca576151c961512c565b5b5092915050565b60006151dc826146b3565b91506151e7836146b3565b92508282019050808211156151ff576151fe61512c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061523f826146b3565b915061524a836146b3565b92508261525a57615259615205565b5b828204905092915050565b600060a08201905061527a6000830188614c8d565b61528760208301876149db565b61529460408301866145e7565b6152a160608301856145e7565b6152ae60808301846145e7565b9695505050505050565b50565b60006152c86000836150af565b91506152d3826152b8565b600082019050919050565b60006152e9826152bb565b9150819050919050565b600061530e615309615304846149c3565b614a05565b6146b3565b9050919050565b61531e816152f3565b82525050565b60006060820190506153396000830186614bf6565b6153466020830185615315565b6153536040830184615315565b949350505050565b6000615366826149c3565b9150615371836149c3565b925082820190506bffffffffffffffffffffffff8111156153955761539461512c565b5b92915050565b60006153a6826149c3565b91506153b1836149c3565b925082820390506bffffffffffffffffffffffff8111156153d5576153d461512c565b5b92915050565b60006040820190506153f06000830185614bf6565b6153fd6020830184615315565b9392505050565b61540d816145db565b811461541857600080fd5b50565b60008151905061542a81615404565b92915050565b600060208284031215615446576154456146a9565b5b60006154548482850161541b565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006154a460168361545d565b91506154af8261546e565b602082019050919050565b600060208201905081810360008301526154d381615497565b9050919050565b60006154e582614a31565b9050919050565b6154f5816154da565b82525050565b600060408201905061551060008301856154ec565b61551d6020830184614c8d565b9392505050565b60006040820190506155396000830185614c8d565b6155466020830184614bf6565b9392505050565b6000615558826146b3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361558a5761558961512c565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126155c1576155c0615595565b5b80840192508235915067ffffffffffffffff8211156155e3576155e261559a565b5b6020830192506001820236038313156155ff576155fe61559f565b5b509250929050565b615610816145bc565b811461561b57600080fd5b50565b60008135905061562d81615607565b92915050565b600060208284031215615649576156486146a9565b5b60006156578482850161561e565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026156c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82615685565b6156cc8683615685565b95508019841693508086168417925050509392505050565b60006156ff6156fa6156f5846146b3565b614a05565b6146b3565b9050919050565b6000819050919050565b615719836156e4565b61572d61572582615706565b848454615692565b825550505050565b600090565b615742615735565b61574d818484615710565b505050565b5b818110156157715761576660008261573a565b600181019050615753565b5050565b601f8211156157b65761578781615660565b61579084615675565b8101602085101561579f578190505b6157b36157ab85615675565b830182615752565b50505b505050565b600082821c905092915050565b60006157d9600019846008026157bb565b1980831691505092915050565b60006157f283836157c8565b9150826002028217905092915050565b61580b826150a4565b67ffffffffffffffff8111156158245761582361475d565b5b61582e8254614feb565b615839828285615775565b600060209050601f83116001811461586c576000841561585a578287015190505b61586485826157e6565b8655506158cc565b601f19841661587a86615660565b60005b828110156158a25784890151825560018201915060208501945060208101905061587d565b868310156158bf57848901516158bb601f8916826157c8565b8355505b6001600288020188555050505b505050505050565b6158dd8161459f565b81146158e857600080fd5b50565b6000813590506158fa816158d4565b92915050565b600060208284031215615916576159156146a9565b5b6000615924848285016158eb565b91505092915050565b600082825260208201905092915050565b6000615949826150a4565b615953818561592d565b93506159638185602086016150ba565b61596c8161474c565b840191505092915050565b600060c08201905061598c6000830189614c8d565b6159996020830188614c8d565b6159a660408301876145ad565b6159b360608301866145cc565b6159c060808301856145cc565b81810360a08301526159d2818461593e565b9050979650505050505050565b60008160601b9050919050565b60006159f7826159df565b9050919050565b6000615a09826159ec565b9050919050565b615a21615a1c82614709565b6159fe565b82525050565b6000819050919050565b6000819050919050565b615a4c615a4782615a27565b615a31565b82525050565b60008160c01b9050919050565b6000615a6a82615a52565b9050919050565b615a82615a7d82614cb7565b615a5f565b82525050565b6000615a948287615a10565b601482019150615aa48286615a3b565b602082019150615ab48285615a10565b601482019150615ac48284615a71565b60088201915081905095945050505050565b6000615ae182614cb7565b9150615aec83614cb7565b9250828201905067ffffffffffffffff811115615b0c57615b0b61512c565b5b92915050565b6000604082019050615b276000830185614bf6565b615b346020830184614bf6565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050615b79816146bd565b92915050565b600060208284031215615b9557615b946146a9565b5b6000615ba384828501615b6a565b91505092915050565b6000604082019050615bc16000830185614bf6565b615bce6020830184614c8d565b9392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000615c0b60168361545d565b9150615c1682615bd5565b602082019050919050565b60006020820190508181036000830152615c3a81615bfe565b9050919050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000615c848383615c41565b82615c8f8135615c4c565b92506004821015615ccf57615cca7fffffffff0000000000000000000000000000000000000000000000000000000083600403600802615685565b831692505b505092915050565b600080fd5b600080fd5b60008085851115615cf557615cf4615cd7565b5b83861115615d0657615d05615cdc565b5b6001850283019150848603905094509492505050565b600080fd5b600081359050615d3081615404565b92915050565b600060208284031215615d4c57615d4b615d1c565b5b615d5660206147bd565b90506000615d6684828501615d21565b60008301525092915050565b600060208284031215615d8857615d876146a9565b5b6000615d9684828501615d36565b91505092915050565b615da8816145db565b82525050565b602082016000820151615dc46000850182615d9f565b50505050565b6000602082019050615ddf6000830184615dae565b92915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000615e1b60178361545d565b9150615e2682615de5565b602082019050919050565b60006020820190508181036000830152615e4a81615e0e565b905091905056fea26469706673582212201a9d43a2e07d44e9ebaf881d218513bb4db0267a55857823a8efef311a291add64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptSubscriptionOwnerTransfer(uint256)": {
        "details": "will revert if original owner of subId has not requested that msg.sender become the new owner.",
        "params": {
          "subId": "- ID of the subscription"
        }
      },
      "addConsumer(uint256,address)": {
        "params": {
          "consumer": "- New consumer which can use the subscription",
          "subId": "- ID of the subscription"
        }
      },
      "cancelSubscription(uint256,address)": {
        "params": {
          "subId": "- ID of the subscription",
          "to": "- Where to send the remaining LINK to"
        }
      },
      "createSubscription()": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);",
        "returns": {
          "subId": "- A unique subscription id."
        }
      },
      "fulfillRandomWords(uint256,address)": {
        "details": "This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.",
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill"
        }
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill",
          "_words": "user-provided random words"
        }
      },
      "fundSubscription(uint256,uint256)": {
        "params": {
          "_amount": "the amount to fund",
          "_subId": "the subscription to fund"
        }
      },
      "fundSubscriptionWithNative(uint256)": {
        "params": {
          "subId": "- ID of the subscription"
        }
      },
      "getActiveSubscriptionIds(uint256,uint256)": {
        "details": "the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state",
        "params": {
          "maxCount": "maximum number of subscriptions to return, 0 to return all",
          "startIndex": "index of the subscription to start from"
        }
      },
      "getSubscription(uint256)": {
        "params": {
          "subId": "- ID of the subscription"
        },
        "returns": {
          "balance": "- LINK balance of the subscription in juels.",
          "consumers": "- list of consumer address which are able to use this subscription.",
          "nativeBalance": "- native balance of the subscription in wei.",
          "reqCount": "- Requests count of subscription.",
          "subOwner": "- owner of the subscription."
        }
      },
      "ownerCancelSubscription(uint256)": {
        "details": "notably can be called even if there are pending requests, outstanding ones may fail onchain",
        "params": {
          "subId": "subscription id"
        }
      },
      "recoverFunds(address)": {
        "params": {
          "to": "address to send link to"
        }
      },
      "recoverNativeFunds(address)": {
        "params": {
          "to": "address to send native to"
        }
      },
      "removeConsumer(uint256,address)": {
        "params": {
          "consumer": "- Consumer to remove from the subscription",
          "subId": "- ID of the subscription"
        }
      },
      "requestSubscriptionOwnerTransfer(uint256,address)": {
        "params": {
          "newOwner": "- proposed new owner of the subscription",
          "subId": "- ID of the subscription"
        }
      },
      "setLINKAndLINKNativeFeed(address,address)": {
        "params": {
          "link": "- address of link token",
          "linkNativeFeed": "address of the link native feed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "acceptSubscriptionOwnerTransfer(uint256)": {
        "notice": "Accept subscription owner transfer."
      },
      "addConsumer(uint256,address)": {
        "notice": "Add a consumer to a VRF subscription."
      },
      "cancelSubscription(uint256,address)": {
        "notice": "Cancel a subscription"
      },
      "createSubscription()": {
        "notice": "Create a VRF subscription."
      },
      "fulfillRandomWords(uint256,address)": {
        "notice": "fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer."
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "notice": "fulfillRandomWordsWithOverride allows the user to pass in their own random words."
      },
      "fundSubscription(uint256,uint256)": {
        "notice": "fundSubscription allows funding a subscription with an arbitrary amount for testing."
      },
      "fundSubscriptionWithNative(uint256)": {
        "notice": "Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."
      },
      "getActiveSubscriptionIds(uint256,uint256)": {
        "notice": "Paginate through all active VRF subscriptions."
      },
      "getSubscription(uint256)": {
        "notice": "Get a VRF subscription."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "ownerCancelSubscription(uint256)": {
        "notice": "Owner cancel subscription, sends remaining link directly to the subscription owner."
      },
      "recoverFunds(address)": {
        "notice": "Recover link sent with transfer instead of transferAndCall."
      },
      "recoverNativeFunds(address)": {
        "notice": "Recover native sent with transfer/call/send instead of fundSubscription."
      },
      "removeConsumer(uint256,address)": {
        "notice": "Remove a consumer from a VRF subscription."
      },
      "requestSubscriptionOwnerTransfer(uint256,address)": {
        "notice": "Request subscription owner transfer."
      },
      "setConfig()": {
        "notice": "Sets the configuration of the vrfv2 mock coordinator"
      },
      "setLINKAndLINKNativeFeed(address,address)": {
        "notice": "set the LINK token contract and link native feed to be used by this coordinator"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 97,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 99,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1061,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "LINK",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)420"
      },
      {
        "astId": 1065,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "LINK_NATIVE_FEED",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)297"
      },
      {
        "astId": 1151,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_consumers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(ConsumerConfig)1144_storage))"
      },
      {
        "astId": 1156,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_subscriptionConfigs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(SubscriptionConfig)1137_storage)"
      },
      {
        "astId": 1161,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_subscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Subscription)1129_storage)"
      },
      {
        "astId": 1163,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_currentSubNonce",
        "offset": 0,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 1166,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_subIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(UintSet)903_storage"
      },
      {
        "astId": 1168,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_totalBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_uint96"
      },
      {
        "astId": 1170,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_totalNativeBalance",
        "offset": 12,
        "slot": "10",
        "type": "t_uint96"
      },
      {
        "astId": 1172,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_withdrawableTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_uint96"
      },
      {
        "astId": 1174,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_withdrawableNative",
        "offset": 12,
        "slot": "11",
        "type": "t_uint96"
      },
      {
        "astId": 1256,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_config",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Config)1253_storage"
      },
      {
        "astId": 2839,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_currentSubId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint64"
      },
      {
        "astId": 2842,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_nextRequestId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2845,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_nextPreSeed",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2859,
        "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
        "label": "s_requests",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Request)2854_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)297": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)420": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(ConsumerConfig)1144_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct SubscriptionAPI.ConsumerConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ConsumerConfig)1144_storage)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ConsumerConfig)1144_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionAPI.ConsumerConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ConsumerConfig)1144_storage"
      },
      "t_mapping(t_uint256,t_struct(Request)2854_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFCoordinatorV2_5Mock.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)2854_storage"
      },
      "t_mapping(t_uint256,t_struct(Subscription)1129_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionAPI.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)1129_storage"
      },
      "t_mapping(t_uint256,t_struct(SubscriptionConfig)1137_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SubscriptionAPI.SubscriptionConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SubscriptionConfig)1137_storage"
      },
      "t_struct(Config)1253_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.Config",
        "members": [
          {
            "astId": 1236,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "minimumRequestConfirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1238,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "maxGasLimit",
            "offset": 2,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1240,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "reentrancyLock",
            "offset": 6,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1242,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "stalenessSeconds",
            "offset": 7,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1244,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "gasAfterPaymentCalculation",
            "offset": 11,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1246,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "fulfillmentFlatFeeNativePPM",
            "offset": 15,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1248,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "fulfillmentFlatFeeLinkDiscountPPM",
            "offset": 19,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1250,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "nativePremiumPercentage",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1252,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "linkPremiumPercentage",
            "offset": 24,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ConsumerConfig)1144_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.ConsumerConfig",
        "members": [
          {
            "astId": 1139,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1141,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "nonce",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1143,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "pendingReqCount",
            "offset": 9,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)2854_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2_5Mock.Request",
        "members": [
          {
            "astId": 2847,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "subId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2849,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "callbackGasLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 2851,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "numWords",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 2853,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "extraArgs",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)431_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 426,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 430,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Subscription)1129_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.Subscription",
        "members": [
          {
            "astId": 1124,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1126,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "nativeBalance",
            "offset": 12,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1128,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "reqCount",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SubscriptionConfig)1137_storage": {
        "encoding": "inplace",
        "label": "struct SubscriptionAPI.SubscriptionConfig",
        "members": [
          {
            "astId": 1131,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1133,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "requestedOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1136,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "consumers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UintSet)903_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 902,
            "contract": "@chainlink/contracts/src/v0.8/vrf/mocks/VRFCoordinatorV2_5Mock.sol:VRFCoordinatorV2_5Mock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)431_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}